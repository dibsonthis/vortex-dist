const lib = load_lib("./bin/sdl", 
	["initSDL", "createWindow", "createRenderer",
	"pollEvent", "renderClear", "renderPresent",
	"getKeyName", "setRenderDrawColor", "delay",
	"drawPoint", "drawLine", "drawRect", "drawGeometry",
	"loadTexture", "loadText", "getWindowSize",
	"showCursor", "queryTexture", "destroyTexture", 
	/* imgui */
	"imgui_check_version", "imgui_create_context", "imgui_init_io", 
	"imgui_init_for_sdl", "imgui_sdl_render_init", "imgui_get_io",
	"imgui_process_event", "imgui_new_frame", "imgui_render",
	"imgui_get_draw_data", "imgui_render_draw_data", "imgui_show_demo_window",
	"imgui_begin", "imgui_end", "imgui_text", "imgui_button", "imgui_button",
	"imgui_checkbox", "imgui_slider_float",
	"imgui_begin_main_menu_bar", "imgui_end_main_menu_bar",
	"imgui_begin_menu", "imgui_end_menu", "imgui_menu_item",
	"imgui_begin_child", "imgui_end_child",
	"imgui_combo", "imgui_input_text", "imgui_same_line",
	"imgui_set_cursor_pos_x", "imgui_set_cursor_pos_y", "imgui_image"])

const imgui = {
	check_version: () => lib.imgui_check_version(),
	create_context: () => lib.imgui_create_context(),
	init_io: () => lib.imgui_init_io(),
	init_for_sdl: (window, renderer) => lib.imgui_init_for_sdl(window, renderer),
	sdl_render_init: (renderer) => lib.imgui_sdl_render_init(renderer),
	get_io: () => lib.imgui_get_io(),
	process_event: (event) => lib.imgui_process_event(event),
	new_frame: () => lib.imgui_new_frame(),
	render: () => lib.imgui_render(),
	get_draw_data: () => lib.imgui_get_draw_data(),
	render_draw_data: (data) => lib.imgui_render_draw_data(data),
	show_demo_window: () => lib.imgui_show_demo_window(),
	begin: (name) => lib.imgui_begin(name),
	end: () => lib.imgui_end(),
	text: (content, wrapped = true) => lib.imgui_text(content, wrapped),
	button: (text, x = 5, y = 5) => lib.imgui_button(text, x, y),
	checkbox: (text, checked) => lib.imgui_checkbox(text, checked),
	slider_float: (text, number, min, max) => lib.imgui_slider_float(text, number, min, max),
	begin_main_menu_bar: () => lib.imgui_begin_main_menu_bar(),
	end_main_menu_bar: () => lib.imgui_end_main_menu_bar(),
	begin_menu: (name) => lib.imgui_begin_menu(name),
	end_menu: () => lib.imgui_end_menu(),
	menu_item: (name) => lib.imgui_menu_item(name),
	begin_child: (name, x, y) => lib.imgui_begin_child(name, x, y),
	end_child: () => lib.imgui_end_child(),
	combo: (text, choice, choices) => lib.imgui_combo(text, choice, choices),
	input_text: (label, text, hint = "") => lib.imgui_input_text(label, text, hint),
	same_line: (offset_from_start_x = 0, spacing = -1) =>lib.imgui_same_line(offset_from_start_x, spacing),
	set_cursor_pos_x: (local_x) => lib.imgui_set_cursor_pos_x(local_x),
	set_cursor_pos_y: (local_y) => lib.imgui_set_cursor_pos_y(local_y),
	image: (texture, width = -1, height = -1) => lib.imgui_image(texture, width, height)

}

const initSDL = () => lib.initSDL()
const createWindow = (windowName, xPos, yPos, width, height, flags = 4) 
	=> lib.createWindow(windowName, xPos, yPos, width, height, flags)
const createRenderer = (window, index = -1) => lib.createRenderer(window, index)
const renderClear = (renderer) => lib.renderClear(renderer)
const renderPresent = (renderer) => lib.renderPresent(renderer)
const getKeyName = (keyCode) => lib.getKeyName(keyCode)
const setRenderDrawColor = (renderer, r = 0, g = 0, b = 0, a = 255) 
	=> lib.setRenderDrawColor(renderer, r, g, b, a)
const delay = (ms) => lib.delay(ms)
const drawPoint = (renderer, xPos, yPos) => lib.drawPoint(renderer, xPos, yPos)
const drawLine = (renderer, x1, y1, x2, y2) => lib.drawLine(renderer, x1, y1, x2, y2)
const drawRect = (renderer, x, y, w, h) => lib.drawRect(renderer, x, y, w, h)
const drawGeometry = (renderer, vertices, texture = None) => lib.drawGeometry(renderer, vertices, texture)
const loadTexture = (renderer, filePath) => lib.loadTexture(renderer, filePath)
const loadText = (renderer, fontPath, fontSize, r, g, b, text) => lib.loadText(renderer, fontPath, fontSize, r, g, b, text)
const getWindowSize = (window) => lib.getWindowSize(window)
const showCursor = (flag) => lib.showCursor(flag)
const queryTexture = (texture) => lib.queryTexture(texture)
const destroyTexture = (texture) => lib.destroyTexture(texture)

const pollEvent = () => {
	const eventObj = lib.pollEvent()
	return eventObj
}

const EventType = {
	QUIT: 256,
	WINDOW: 512,
	KEYDOWN: 768,
	KEYUP: 769,
	MOUSEMOTION: 1024,
	MOUSEBUTTONDOWN: 1025,
	MOUSEBUTTONUP: 1026,
	MOUSEWHEEL: 1027
}